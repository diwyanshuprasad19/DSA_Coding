134.https://leetcode.com/problems/gas-station/description/
See here only 1 unique solution will exist 
Hence solution is:
class Solution {
public:
    int canCompleteCircuit(vector<int>& gas, vector<int>& cost) {
        int n=gas.size();
        int total_gas=0,total_cost=0;
        int curr_gas=0, starting_point=0;
        for(int i=0;i<n;i++)
        {
            //these two variable are to check if no case is possible
            total_gas+=gas[i];
            total_cost+=cost[i];
            //for checking the total present gas at index i
            curr_gas+=gas[i]-cost[i];
            if(curr_gas<0)
            {
               //there is a breakdown....so we will start from next point or index
                starting_point=i+1;
                //reset our fuel 
                curr_gas=0;
            }
        }
        return (total_gas<total_cost)?-1:starting_point;     
    }
};

Tc:O(n)
Sc:O(1)

    int tour(petrolPump p[],int n)
    {
       int start=0,fueltank=0,fuelshortage=0;
       for(int i=0;i<n;i++)
       {
           fueltank+=p[i].petrol-p[i].distance;
           if(fueltank<0)
           {
               start=i+1;
               fuelshortage+=fueltank;
               fueltank=0;
           }
       }
       
       //if true can also return start point
       if(fueltank+fuelshortage>=0)
       return start;
       
       return -1;
    }