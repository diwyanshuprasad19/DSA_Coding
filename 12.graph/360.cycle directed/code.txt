using dfs

code:
#include <iostream>
#include <vector>

using namespace std;

class Graph {
    int V;
    vector<vector<int>> adj;

public:
    Graph(int V) {
        this->V = V;
        adj.resize(V);
    }

    void addEdge(int u, int v) {
        adj[u].push_back(v); // Directed Graph
    }

    bool dfs(int node, vector<bool>& visited, vector<bool>& recStack) {
        visited[node] = true;
        recStack[node] = true;

        for (int neighbor : adj[node]) {
            if (!visited[neighbor]) {
                if (dfs(neighbor, visited, recStack)) {
                    return true;
                }
            } else if (recStack[neighbor]) { // Cycle detected
                return true;
            }
        }
        recStack[node] = false;
        return false;
    }

    bool hasCycle() {
        vector<bool> visited(V, false);
        vector<bool> recStack(V, false);

        for (int i = 0; i < V; i++) {
            if (!visited[i]) {
                if (dfs(i, visited, recStack)) {
                    return true;
                }
            }
        }
        return false;
    }
};

int main() {
    Graph g(4);
    g.addEdge(0, 1);
    g.addEdge(1, 2);
    g.addEdge(2, 3);
    g.addEdge(3, 1); // This edge creates a cycle

    if (g.hasCycle()) {
        cout << "Cycle detected in the directed graph.\n";
    } else {
        cout << "No cycle found in the directed graph.\n";
    }

    return 0;
}

TC:O(V + E)
SC:O(V)