
Ques:https://www.geeksforgeeks.org/convert-min-heap-to-max-heap/

Code:

// C program to convert min Heap to max Heap

#include <stdio.h>

void swap(int* a, int* b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

// To heapify a subtree with root at given index
void MaxHeapify(int arr[], int i, int N) {
    int l = 2 * i + 1;
    int r = 2 * i + 2;
    int largest = i;

    if (l < N && arr[l] > arr[i])
        largest = l;
    if (r < N && arr[r] > arr[largest])
        largest = r;
    if (largest != i) {
        swap(&arr[i], &arr[largest]);
        MaxHeapify(arr, largest, N);
    }
}

// This function basically builds max heap
void convertMaxHeap(int arr[], int N) {
    // Start from bottom-most and right-most
    // internal node and heapify all internal
    // nodes in bottom-up way
    for (int i = (N - 2) / 2; i >= 0; --i)
        MaxHeapify(arr, i, N);
}

// A utility function to print a given array of given size
void printArray(int* arr, int size) {
    for (int i = 0; i < size; ++i)
        printf("%d ", arr[i]);
}

// Driver's code
int main() {
    // Array representing Min Heap
    int arr[] = { 3, 5, 9, 6, 8, 20, 10, 12, 18, 9 };
    int N = sizeof(arr) / sizeof(arr[0]);

    printf("Min Heap array : ");
    printArray(arr, N);

    // Function call
    convertMaxHeap(arr, N);

    printf("\nMax Heap array : ");
    printArray(arr, N);

    return 0;
}


Time and space comeplxity:

MaxHeapify Function
Purpose: Recursively fixes the heap property by ensuring that each subtree is a Max Heap.
Time Complexity:
In the worst case, it recurses down to the leaf nodes.
The maximum depth of a binary heap (complete binary tree) is O(log n).
At each level, a single heapify operation takes O(log n) time.
Total Complexity per call: O(log n).
2️⃣ convertMaxHeap Function
Purpose: Converts the entire Min Heap into a Max Heap.
Time Complexity:
We iterate over all internal nodes (non-leaf nodes).
There are n/2 internal nodes in a complete binary tree.
Each MaxHeapify call takes O(log n) time.
Total iterations: O(n/2) = O(n).
Total time complexity: O(n log n).
Overall Complexity
Operation	Time Complexity	Space Complexity
MaxHeapify() (per node)	O(log n)	O(1)
convertMaxHeap()	O(n log n)	O(1)
Total Complexity	O(n log n)	O(1)