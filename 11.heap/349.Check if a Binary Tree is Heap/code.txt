Similar:https://leetcode.com/problems/check-completeness-of-a-binary-tree/description/ 
Sol:https://leetcode.com/problems/check-completeness-of-a-binary-tree/solutions/6252253/o-n-time-complexity-based-c/


//Max Heap max heap this is
//If All Values Are the Same in a Heap, Is It a Min Heap or Max Heap?
If all values in a heap are the same, then the heap is both a Min Heap and a Max Heap simultaneously.

Code:

 int sheap(struct Node* tree)
  {
      if(tree==NULL)
      return 0;
      return 1+sheap(tree->left)+sheap(tree->right);
  }
  int solve(struct Node* tree,int n,int index)
  {
      if(tree==NULL)
      return 1;
      if(index>=n)
      return 0;
      if((tree->left  && tree->data<=tree->left->data)  || (tree->right  && tree->data<=tree->right->data))
      return 0;
      return solve(tree->left,n,2*index+1) && solve(tree->right,n,2*index+2);
  }
    bool isHeap(struct Node* tree) {
        int index=0;
        if(tree==NULL)
        return 1;
        int n=sheap(tree);
        if(solve(tree,n,index))
        return 1;
        return 0;
    }

Time and sapce complexity
Complete Binary Tree (CBT) Property:

Every level (except possibly the last) is completely filled.
All nodes in the last level appear as left as possible.
This is checked using the sheap() function, which counts the total number of nodes.
Heap Order Property:

Every parent node has a value greater than or equal to its child nodes.
This is checked using the solve() function.
Functions:
sheap(struct Node* tree):

Counts the total number of nodes in the tree.
Time Complexity: 
𝑂
(
𝑁
)
O(N)
solve(struct Node* tree, int n, int index):

Ensures the heap property and CBT condition.
If index >= n, it means the node is missing, violating CBT.
Ensures that every parent is greater than or equal to its child nodes.
Recursively checks left and right subtrees.
Time Complexity: 
𝑂
(
𝑁
)
O(N)
isHeap(struct Node* tree):

Calls sheap() to count nodes.
Calls solve() to validate heap order property.
Returns true if both conditions are satisfied.
Time Complexity: 
𝑂
(
𝑁
)
O(N)
Complexity Analysis:
Function	Time Complexity	Space Complexity
sheap()	O(N)	O(1)
solve()	O(N)	O(1)
isHeap()	O(N)	O(1)

//Yes! The heap property only requires that parent nodes are greater than or equal to 
their children in a Max Heap and less than or equal to their children in a Min Heap
//Can the Root Have the Same Value as its Children in a Binary Search Tree (BST)?
No! In a Binary Search Tree (BST), the rule is:

Left subtree: Contains nodes with values strictly less than the root.
Right subtree: Contains nodes with values strictly greater than the root.
