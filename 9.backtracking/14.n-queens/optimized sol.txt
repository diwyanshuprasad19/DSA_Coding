Ques:

Sol:https://www.youtube.com/watch?v=i05Ju7AftcM&t=981s
start from 28:20

Code:

using namespace std;
class Solution {
  public:
    void solve(int col, vector < string > & board, vector < vector < string >> & ans, vector < int > & leftrow, vector < int > & upperDiagonal, vector < int > & lowerDiagonal, int n) {
      if (col == n) {
        ans.push_back(board);
        return;
      }
      for (int row = 0; row < n; row++) {
        if (leftrow[row] == 0 && lowerDiagonal[row + col] == 0 && upperDiagonal[n - 1 + col - row] == 0) {
          board[row][col] = 'Q';
          leftrow[row] = 1;
          lowerDiagonal[row + col] = 1;
          upperDiagonal[n - 1 + col - row] = 1;
          solve(col + 1, board, ans, leftrow, upperDiagonal, lowerDiagonal, n);
          board[row][col] = '.';
          leftrow[row] = 0;
          lowerDiagonal[row + col] = 0;
          upperDiagonal[n - 1 + col - row] = 0;
        }
      }
    }

  public:
    vector < vector < string >> solveNQueens(int n) {
      vector < vector < string >> ans;
      vector < string > board(n);
      string s(n, '.');
      for (int i = 0; i < n; i++) {
        board[i] = s;
      }
      vector < int > leftrow(n, 0), upperDiagonal(2 * n - 1, 0), lowerDiagonal(2 * n - 1, 0);
      //2*n-1 because for checking diagnol we do wor +col and hecne n-1+n-1 +0th index hence 2*n-1 will come
      solve(0, board, ans, leftrow, upperDiagonal, lowerDiagonal, n);
      return ans;
    }
};
int main() {
  int n = 4; // we are taking 4*4 grid and 4 queens
  Solution obj;
  vector < vector < string >> ans = obj.solveNQueens(n);
  for (int i = 0; i < ans.size(); i++) {
    cout << "Arrangement " << i + 1 << "\n";
    for (int j = 0; j < ans[0].size(); j++) {
      cout << ans[i][j];
      cout << endl;
    }
    cout << endl;
  }
  return 0;
}



Time ans space compexity:
Time Complexity Analysis
The time complexity of solving the N-Queens problem using backtracking is O(N!) (factorial time complexity), which arises due to the following:

Recursive Calls:

We place one queen in each column.
In the first column, we have N choices.
In the second column, we have at most N-1 choices (as one row is blocked).
In the third column, we have at most N-2 choices, and so on.
This leads to the branching factor roughly similar to N * (N-1) * (N-2) * ... * 1 = N!.
Backtracking Overhead:

For each valid placement, we check whether the row and diagonals are safe using O(1) lookup operations with leftrow, upperDiagonal, and lowerDiagonal arrays.
Thus, the worst-case time complexity is:

𝑂
(
𝑁
!
)
O(N!)
Practical Considerations
Although O(N!) is exponential, the optimizations using hashing (leftrow, upperDiagonal, and lowerDiagonal) improve the performance compared to a naive approach that checks each row and diagonal separately.
Space Complexity Analysis
The space complexity consists of the following components:

Chessboard (board):

Stores the current board configuration.
Uses O(N²) space (N rows, each storing an N-character string).
Hashing Arrays (leftrow, upperDiagonal, lowerDiagonal):

leftrow → O(N)
upperDiagonal → O(2N - 1) ≈ O(N)
lowerDiagonal → O(2N - 1) ≈ O(N)
Combined space → O(N) + O(N) + O(N) = O(N)
Recursive Stack Space:

The recursion goes up to O(N) depth, as we place one queen per column.
This results in O(N) stack space.
Result Storage (ans):

The number of valid solutions is not fixed but can be as large as O(N!).
If A is the number of solutions, the storage for answers is O(A * N²).
Final Space Complexity
𝑂
(
𝑁
2
)
+
𝑂
(
𝑁
)
+
𝑂
(
𝑁
)
+
𝑂
(
𝑁
)
+
𝑂
(
𝑁
)
=
𝑂
(
𝑁
2
)
O(N 
2
 )+O(N)+O(N)+O(N)+O(N)=O(N 
2
 )
excluding the result storage, which depends on the number of solutions.