{\rtf1\ansi\ansicpg1252\cocoartf2759
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red70\green137\blue204;\red30\green30\blue30;\red202\green202\blue202;
\red67\green192\blue160;\red212\green214\blue154;\red140\green211\blue254;\red89\green138\blue67;\red183\green111\blue179;
\red167\green197\blue152;}
{\*\expandedcolortbl;;\cssrgb\c33725\c61176\c83922;\cssrgb\c15686\c15686\c15686;\cssrgb\c83137\c83137\c83137;
\cssrgb\c30588\c78824\c69020;\cssrgb\c86275\c86275\c66667;\cssrgb\c61176\c86275\c99608;\cssrgb\c41569\c60000\c33333;\cssrgb\c77255\c52549\c75294;
\cssrgb\c70980\c80784\c65882;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 class\cf4 \strokec4  \cf5 \strokec5 FindSumPairs\cf4 \strokec4  \{\cb1 \
\cf2 \cb3 \strokec2 public:\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3     vector<\cf2 \strokec2 int\cf4 \strokec4 > v1,v2;\cb1 \
\cb3     unordered_map<\cf2 \strokec2 int\cf4 \strokec4 ,\cf2 \strokec2 int\cf4 \strokec4 > m;\cb1 \
\cb3     \cb1 \
\cb3     \cf6 \strokec6 FindSumPairs\cf4 \strokec4 (\cf5 \strokec5 vector\cf4 \strokec4 <\cf2 \strokec2 int\cf4 \strokec4 >\cf2 \strokec2 &\cf4 \strokec4  \cf7 \strokec7 nums1\cf4 \strokec4 , \cf5 \strokec5 vector\cf4 \strokec4 <\cf2 \strokec2 int\cf4 \strokec4 >\cf2 \strokec2 &\cf4 \strokec4  \cf7 \strokec7 nums2\cf4 \strokec4 ) \{\cb1 \
\cb3         v1=nums1,v2=nums2;\cf8 \strokec8   // Copying array nums1 and nums;\cf4 \cb1 \strokec4 \
\cb3         \cf6 \strokec6 sort\cf4 \strokec4 (\cf7 \strokec7 v1\cf4 \strokec4 .\cf6 \strokec6 begin\cf4 \strokec4 (),\cf7 \strokec7 v1\cf4 \strokec4 .\cf6 \strokec6 end\cf4 \strokec4 ());\cf8 \strokec8   // sorting array v1 for finding count it will be useful\cf4 \cb1 \strokec4 \
\cb3         \cb1 \
\cb3         \cf2 \strokec2 int\cf4 \strokec4  n=\cf7 \strokec7 nums2\cf4 \strokec4 .\cf6 \strokec6 size\cf4 \strokec4 ();\cb1 \
\cb3         \cb1 \
\pard\pardeftab720\partightenfactor0
\cf8 \cb3 \strokec8         //Pushing elements in Map and increasing their frequency\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3         \cf9 \strokec9 for\cf4 \strokec4 (\cf2 \strokec2 int\cf4 \strokec4  i=\cf10 \strokec10 0\cf4 \strokec4 ;i<n;i++)\cb1 \
\cb3             \cf7 \strokec7 m\cf4 \strokec4 [\cf7 \strokec7 nums2\cf4 \strokec4 [i]]++;\cb1 \
\cb3     \}\cb1 \
\cb3     \cb1 \
\cb3     \cf2 \strokec2 void\cf4 \strokec4  \cf6 \strokec6 add\cf4 \strokec4 (\cf2 \strokec2 int\cf4 \strokec4  \cf7 \strokec7 index\cf4 \strokec4 , \cf2 \strokec2 int\cf4 \strokec4  \cf7 \strokec7 val\cf4 \strokec4 ) \{\cb1 \
\cb3         \cf7 \strokec7 m\cf4 \strokec4 [\cf7 \strokec7 v2\cf4 \strokec4 [index]]--;\cf8 \strokec8  // Decreasing frequency from map by 1 of given index element\cf4 \cb1 \strokec4 \
\cb3         \cf7 \strokec7 v2\cf4 \strokec4 [index]+=val;\cf8 \strokec8  // Change and add this val to given index of v2\cf4 \cb1 \strokec4 \
\cb3         \cf7 \strokec7 m\cf4 \strokec4 [\cf7 \strokec7 v2\cf4 \strokec4 [index]]++;\cf8 \strokec8  // Increasing frequency in map by 2 of new index element after increasing val.\cf4 \cb1 \strokec4 \
\cb3     \}\cb1 \
\cb3     \cb1 \
\cb3     \cf2 \strokec2 int\cf4 \strokec4  \cf6 \strokec6 count\cf4 \strokec4 (\cf2 \strokec2 int\cf4 \strokec4  \cf7 \strokec7 tot\cf4 \strokec4 ) \{\cb1 \
\cb3         \cb1 \
\cb3         \cf2 \strokec2 int\cf4 \strokec4  ans=\cf10 \strokec10 0\cf4 \strokec4 ;\cb1 \
\cb3         \cf2 \strokec2 int\cf4 \strokec4  n1=\cf7 \strokec7 v1\cf4 \strokec4 .\cf6 \strokec6 size\cf4 \strokec4 ();\cb1 \
\cb3         \cb1 \
\cb3         \cf9 \strokec9 for\cf4 \strokec4 (\cf2 \strokec2 int\cf4 \strokec4  i=\cf10 \strokec10 0\cf4 \strokec4 ;i<n1;i++)\cb1 \
\cb3         \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf8 \cb3 \strokec8             // If v[i]>=tot then we will break this loop as lowest element in v2 is 1.\cf4 \cb1 \strokec4 \
\cf8 \cb3 \strokec8             // So v[i] will be greater after this.\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3             \cf9 \strokec9 if\cf4 \strokec4 (\cf7 \strokec7 v1\cf4 \strokec4 [i]>=tot)  \cb1 \
\cb3                 \cf9 \strokec9 break\cf4 \strokec4 ;\cb1 \
\cb3             ans+=\cf7 \strokec7 m\cf4 \strokec4 [tot-\cf7 \strokec7 v1\cf4 \strokec4 [i]];\cf8 \strokec8   // We will directly add frequency to ans;\cf4 \cb1 \strokec4 \
\cb3         \}\cb1 \
\cb3         \cf9 \strokec9 return\cf4 \strokec4  ans;\cb1 \
\cb3     \}\cb1 \
\cb3 \};\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf8 \cb3 \strokec8 /**\cf4 \cb1 \strokec4 \
\cf8 \cb3 \strokec8  * Your FindSumPairs object will be instantiated and called as such:\cf4 \cb1 \strokec4 \
\cf8 \cb3 \strokec8  * FindSumPairs* obj = new FindSumPairs(nums1, nums2);\cf4 \cb1 \strokec4 \
\cf8 \cb3 \strokec8  * obj->add(index,val);\cf4 \cb1 \strokec4 \
\cf8 \cb3 \strokec8  * int param_2 = obj->count(tot);\cf4 \cb1 \strokec4 \
\cf8 \cb3 \strokec8  */\cf4 \cb1 \strokec4 \
}