Code:

#include <bits/stdc++.h>
using namespace std;

struct Node {
    int data;
    Node* left;
    Node* right;
    Node(int val) : data(val), left(NULL), right(NULL) {}
};

// Function to find height using level-order traversal (BFS)
int height(Node* node) {
    if (!node)
        return -1; // Returning -1 for height in case of empty tree (or 0 for depth-based approach)

    queue<Node*> q;
    q.push(node);
    q.push(NULL);
    int level = 0;

    while (!q.empty()) {
        Node* nn = q.front();
        q.pop();

        if (nn != NULL) {
            if (nn->left)
                q.push(nn->left);
            if (nn->right)
                q.push(nn->right);
        } 
        else if (!q.empty()) {
            q.push(NULL);
            level++;
        }
    }
    return level + 1;
}

int main() {
    Node* root = new Node(10);
    root->left = new Node(20);
    root->right = new Node(30);
    root->left->left = new Node(40);
    root->left->right = new Node(50);
    root->right->right = new Node(70);

    cout << "Height of the Tree: " << height(root) << endl;

    return 0;
}


Time Complexity:
Each node is visited once, making it O(N).
Space Complexity:
The queue can store at most N/2 nodes at the deepest level in the worst case.
Thus, the space complexity is O(N).
