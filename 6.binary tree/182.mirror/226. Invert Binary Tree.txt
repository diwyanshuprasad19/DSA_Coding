Code:

#include <bits/stdc++.h>
using namespace std;

struct Node {
    int data;
    Node* left;
    Node* right;
    Node(int val) : data(val), left(NULL), right(NULL) {}
};

// Function to mirror a binary tree
void mirror(Node* node) {
    if (node == NULL) return;

    // Recursively mirror left and right subtrees
    mirror(node->left);
    mirror(node->right);

    // Swap left and right children
    Node* temp = node->right;
    node->right = node->left;
    node->left = temp;
}

// Inorder traversal to print the tree
void inorder(Node* root) {
    if (root == NULL) return;
    inorder(root->left);
    cout << root->data << " ";
    inorder(root->right);
}

int main() {
    Node* root = new Node(1);
    root->left = new Node(2);
    root->right = new Node(3);
    root->left->left = new Node(4);
    root->left->right = new Node(5);
    root->right->left = new Node(6);
    root->right->right = new Node(7);

    cout << "Original Inorder Traversal: ";
    inorder(root);
    cout << endl;

    mirror(root);

    cout << "Mirrored Inorder Traversal: ";
    inorder(root);
    cout << endl;

    return 0;
}



Time Complexity:
O(N) → Each node is visited once.
Space Complexity:
O(H) → Where H is the height of the tree.
Worst-case O(N) (for a skewed tree), O(logN) for a balanced tree.