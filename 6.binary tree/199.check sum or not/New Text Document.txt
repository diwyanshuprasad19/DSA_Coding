Ques:https://www.geeksforgeeks.org/problems/sum-tree/1?utm_source=chatgpt.com

Code:

#include <bits/stdc++.h>
using namespace std;

// Definition for a binary tree node
struct Node {
    int data;
    Node *left, *right;
    Node(int val) : data(val), left(NULL), right(NULL) {}
};

int f = 1;

// Function to check if a tree is a Sum Tree
int isSum(Node* root) {
    if (root == NULL) return 0;
    if (root->left == NULL && root->right == NULL) return root->data;
    if (f == 0) return 0;

    int a = isSum(root->left);
    int b = isSum(root->right);

    if (a + b != root->data) f = 0;
    
    return a + b + root->data;
}

bool isSumTree(Node* root) {
    f = 1;
    int a = isSum(root);
    return f;
}

// Example usage
int main() {
    Node* root = new Node(26);
    root->left = new Node(10);
    root->right = new Node(3);
    root->left->left = new Node(4);
    root->left->right = new Node(6);
    root->right->right = new Node(3);

    cout << (isSumTree(root) ? "Yes, it is a Sum Tree" : "No, it is not a Sum Tree") << endl;

    return 0;
}


Time and Space Complexity
Time Complexity:
Each node is visited once, leading to O(n) complexity.
Space Complexity:
O(h) (due to recursive function calls), where h is the height of the tree.
Best case: O(log n) (balanced tree).
Worst case: O(n) (skewed tree).