sol and ques:https://medium.com/codex/leetcode-106-construct-binary-tree-from-inorder-and-postorder-traversal-db51ff8be679

Code:
#include <bits/stdc++.h>
using namespace std;

// Definition for a binary tree node
struct TreeNode {
    int val;
    TreeNode *left, *right;

    // Constructor to initialize a new node
    TreeNode(int x) : val(x), left(NULL), right(NULL) {}
};

class Solution {
public:
    int index;
    unordered_map<int, int> m;

    // Helper function to recursively build the tree
    TreeNode* func(vector<int>& inorder, vector<int>& postorder, int start, int end) {
        if (start > end) return NULL;

        // Create a new node with current postorder index value
        TreeNode* res = new TreeNode(postorder[index--]);

        // If this node has no children, return
        if (start == end) return res;

        // Find the index of this node in the inorder traversal
        int mid = m[res->val];

        // Construct right subtree first (since postorder is left-right-root)
        res->right = func(inorder, postorder, mid + 1, end);
        res->left = func(inorder, postorder, start, mid - 1);

        return res;
    }

    // Main function to build tree
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        int n = inorder.size();
        index = n - 1;

        // Store inorder indices in hashmap for quick lookup
        for (int i = 0; i < n; i++) {
            m[inorder[i]] = i;
        }

        return func(inorder, postorder, 0, n - 1);
    }
};

// Utility function to print tree in preorder
void preorder(TreeNode* root) {
    if (root == NULL) return;
    cout << root->val << " ";
    preorder(root->left);
    preorder(root->right);
}

// Driver code to test the function
int main() {
    vector<int> inorder = {9, 3, 15, 20, 7};
    vector<int> postorder = {9, 15, 7, 20, 3};

    Solution sol;
    TreeNode* root = sol.buildTree(inorder, postorder);

    cout << "Preorder traversal of constructed tree: ";
    preorder(root);
    cout << endl;

    return 0;
}


Time Complexity Analysis:
Each Node is Visited Once:

𝑂
(
𝑁
)
O(N) where 
𝑁
N is the number of nodes.
Finding Index in Inorder Array:

Uses unordered_map, which provides O(1) lookup.
Total Recursion Calls:

𝑂
(
𝑁
)
O(N) (each node processed once).
Total Time Complexity:
𝑂
(
𝑁
)
O(N)
(Since each node is processed once)

Space Complexity Analysis:
Recursive Stack Storage:

𝑂
(
𝐻
)
O(H) where 
𝐻
H is the tree height.
Worst case (skewed tree) → 
𝑂
(
𝑁
)
O(N).
Best case (balanced tree) → 
𝑂
(
log
⁡
𝑁
)
O(logN).
HashMap Storage (unordered_map<int, int>)

Stores 
𝑂
(
𝑁
)
O(N) entries (for quick index lookup).
Total Space Complexity:

𝑂
(
𝑁
)
O(N)
(For recursion stack and hash map storage)

Final Complexity Summary:
Time Complexity: 
𝑂
(
𝑁
)
O(N)
Space Complexity: 
𝑂
(
𝑁
)
O(N)