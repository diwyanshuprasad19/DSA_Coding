Ques:

Code:

#include <iostream>
using namespace std;

// Definition for a binary tree node.
struct Node {
    int data;
    Node* left;
    Node* right;
    Node(int val) : data(val), left(NULL), right(NULL) {}
};

// Function to find the Lowest Common Ancestor (LCA) of two nodes
Node* lca(Node* root, int n1, int n2) {
    if (root == NULL || root->data == n1 || root->data == n2)
        return root;

    Node* leftLCA = lca(root->left, n1, n2);
    Node* rightLCA = lca(root->right, n1, n2);

    if (leftLCA && rightLCA)
        return root;

    return (leftLCA != NULL) ? leftLCA : rightLCA;
}

// Example usage
int main() {
    Node* root = new Node(3);
    root->left = new Node(5);
    root->right = new Node(1);
    root->left->left = new Node(6);
    root->left->right = new Node(2);
    root->right->left = new Node(0);
    root->right->right = new Node(8);
    root->left->right->left = new Node(7);
    root->left->right->right = new Node(4);

    int n1 = 5, n2 = 1;
    Node* ancestor = lca(root, n1, n2);
    if (ancestor)
        cout << "LCA of " << n1 << " and " << n2 << " is: " << ancestor->data << endl;
    else
        cout << "LCA does not exist." << endl;

    return 0;
}


//brute would be like ksum path use path method.
//use 2 method to find path of n1 and n2
//then in both vector(Global) like 1 2 4 and 1 2 5 7
//here print last matched elemtn from start which is 2 
//2 is ancestor.


Time and Space Complexity Analysis of LCA in a Binary Tree
Time Complexity:
The function recursively visits each node once, making the worst-case time complexity O(N), where N is the number of nodes in the tree.
Each recursive call checks the left and right subtrees, but since a node can only have one LCA, each node is processed only once.
✅ Overall Time Complexity: O(N)

Space Complexity:
The function uses recursion, which means space is consumed on the call stack.
The maximum depth of recursion depends on the height (H) of the tree:
Balanced tree: The height H = log N, so space complexity is O(log N).
Skewed tree: The height H = N, so space complexity is O(N).
No additional data structures are used, so the primary space usage comes from recursive calls.
✅ Overall Space Complexity: O(H), where H is the height of the tree.

Final Complexity Summary:
Case	Time Complexity	Space Complexity
General Case	O(N)	O(H)
Balanced Tree	O(N)	O(log N)
Skewed Tree	O(N)	O(N)