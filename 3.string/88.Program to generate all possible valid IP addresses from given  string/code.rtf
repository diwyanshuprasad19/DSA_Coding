{\rtf1\ansi\ansicpg1252\cocoartf2759
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red70\green137\blue204;\red30\green30\blue30;\red202\green202\blue202;
\red67\green192\blue160;\red212\green214\blue154;\red140\green211\blue254;\red89\green138\blue67;\red183\green111\blue179;
\red167\green197\blue152;\red194\green126\blue101;}
{\*\expandedcolortbl;;\cssrgb\c33725\c61176\c83922;\cssrgb\c15686\c15686\c15686;\cssrgb\c83137\c83137\c83137;
\cssrgb\c30588\c78824\c69020;\cssrgb\c86275\c86275\c66667;\cssrgb\c61176\c86275\c99608;\cssrgb\c41569\c60000\c33333;\cssrgb\c77255\c52549\c75294;
\cssrgb\c70980\c80784\c65882;\cssrgb\c80784\c56863\c47059;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 https://leetcode.com/problems/find-all-anagrams-in-a-string/description/\
\
\
Code\
\pard\pardeftab720\partightenfactor0

\f1\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 class\cf4 \strokec4  \cf5 \strokec5 Solution\cf4 \strokec4  \{\cb1 \
\cf2 \cb3 \strokec2 public:\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3     \cf5 \strokec5 vector\cf4 \strokec4 <\cf2 \strokec2 int\cf4 \strokec4 > \cf6 \strokec6 findAnagrams\cf4 \strokec4 (\cf5 \strokec5 string\cf4 \strokec4  \cf7 \strokec7 s\cf4 \strokec4 , \cf5 \strokec5 string\cf4 \strokec4  \cf7 \strokec7 p\cf4 \strokec4 ) \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf8 \cb3 \strokec8         // return empty vector if p is larger than s\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3         \cf9 \strokec9 if\cf4 \strokec4 (\cf7 \strokec7 p\cf4 \strokec4 .\cf6 \strokec6 size\cf4 \strokec4 () > \cf7 \strokec7 s\cf4 \strokec4 .\cf6 \strokec6 size\cf4 \strokec4 ()) \cf9 \strokec9 return\cf4 \strokec4  \{\};\cb1 \
\pard\pardeftab720\partightenfactor0
\cf8 \cb3 \strokec8         // initialize two vectors of size 26, freq and count, to store the frequency of each letter in p and a sliding window in s\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3         vector<\cf2 \strokec2 int\cf4 \strokec4 > \cf6 \strokec6 freq\cf4 \strokec4 (\cf10 \strokec10 26\cf4 \strokec4 , \cf10 \strokec10 0\cf4 \strokec4 ), ans, \cf6 \strokec6 count\cf4 \strokec4 (\cf10 \strokec10 26\cf4 \strokec4 , \cf10 \strokec10 0\cf4 \strokec4 );\cb1 \
\cb3         \cf2 \strokec2 int\cf4 \strokec4  n = \cf7 \strokec7 p\cf4 \strokec4 .\cf6 \strokec6 size\cf4 \strokec4 ();\cb1 \
\pard\pardeftab720\partightenfactor0
\cf8 \cb3 \strokec8         // calculate the frequency of each letter in p\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3         \cf9 \strokec9 for\cf4 \strokec4 (\cf2 \strokec2 int\cf4 \strokec4  i=\cf10 \strokec10 0\cf4 \strokec4 ;i<n;i++)\{\cb1 \
\cb3             \cf7 \strokec7 freq\cf4 \strokec4 [\cf7 \strokec7 p\cf4 \strokec4 [i] - \cf11 \strokec11 'a'\cf4 \strokec4 ]++;\cb1 \
\cb3             \cf7 \strokec7 count\cf4 \strokec4 [\cf7 \strokec7 s\cf4 \strokec4 [i] - \cf11 \strokec11 'a'\cf4 \strokec4 ]++;\cb1 \
\cb3         \}\cb1 \
\pard\pardeftab720\partightenfactor0
\cf8 \cb3 \strokec8         // check if the first window is an anagram of p\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3         \cf9 \strokec9 if\cf4 \strokec4 (freq == count) \cf7 \strokec7 ans\cf4 \strokec4 .\cf6 \strokec6 push_back\cf4 \strokec4 (\cf10 \strokec10 0\cf4 \strokec4 );\cb1 \
\pard\pardeftab720\partightenfactor0
\cf8 \cb3 \strokec8         // slide the window by 1 each time and update the count vector\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3         \cf9 \strokec9 for\cf4 \strokec4 (\cf2 \strokec2 int\cf4 \strokec4  i=n;i<\cf7 \strokec7 s\cf4 \strokec4 .\cf6 \strokec6 size\cf4 \strokec4 ();i++)\{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf8 \cb3 \strokec8             // decrease the frequency of the letter that is out of the window\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3             \cf7 \strokec7 count\cf4 \strokec4 [\cf7 \strokec7 s\cf4 \strokec4 [i-n] - \cf11 \strokec11 'a'\cf4 \strokec4 ]--;\cb1 \
\pard\pardeftab720\partightenfactor0
\cf8 \cb3 \strokec8             // increase the frequency of the letter that just enters the window\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3             \cf7 \strokec7 count\cf4 \strokec4 [\cf7 \strokec7 s\cf4 \strokec4 [i] - \cf11 \strokec11 'a'\cf4 \strokec4 ]++;\cb1 \
\pard\pardeftab720\partightenfactor0
\cf8 \cb3 \strokec8             // check if the current window is an anagram of p\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3             \cf9 \strokec9 if\cf4 \strokec4 (count == freq) \cf7 \strokec7 ans\cf4 \strokec4 .\cf6 \strokec6 push_back\cf4 \strokec4 (i - n + \cf10 \strokec10 1\cf4 \strokec4 );  \cb1 \
\cb3         \}\cb1 \
\pard\pardeftab720\partightenfactor0
\cf8 \cb3 \strokec8         // return the ans vector\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3         \cf9 \strokec9 return\cf4 \strokec4  ans;\cb1 \
\cb3     \}\cb1 \
\cb3 \};\cb1 \
}